package by.azzibom.tetris.view.swing;

import by.azzibom.tetris.model.TetrisGame;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

/**
 * окно игры
 *
 * @author Ihar Misevich
 * @version 1.0
 */
public class GameFrame extends JFrame {

    private JPanel nextShapeField;
    private JPanel gameField;

    private JPanel contentField;
    private JLabel removeLineValueLabel;
    private JLabel scoreValueLabel;
    private JLabel speedValueLabel;
    private JLabel statusLabelValue;
    private JPanel gameFieldContainer;

    private TetrisGame game;
    private DrawSquareStyle drawSquareStyleStrategy;

    public GameFrame(TetrisGame game, DrawSquareStyle drawSquareStyleStrategy) {
        this.game = game;
        this.drawSquareStyleStrategy = drawSquareStyleStrategy;

        $$$setupUI$$$();

        int[] imageSizes = {16, 24, 32, 48, 64, 72, 96, 128, 256};
        List<Image> images = new ArrayList<>(imageSizes.length);
        for (int imageSize : imageSizes) {
            images.add(new ImageIcon(ClassLoader.getSystemResource("images/tetris" + imageSize + ".png")).getImage());
        }
        setIconImages(images);

        super.setTitle(game.getName());
        super.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        super.setContentPane(contentField);

        super.pack();
        super.setResizable(false);

        super.setLocationRelativeTo(null);
//        super.setVisible(true);

        this.game.addObserver(new GameObserver());

        removeLineValueLabel.setText(String.valueOf(game.getRemovedLines()));
        scoreValueLabel.setText(String.valueOf(game.getScore()));
        speedValueLabel.setText(String.valueOf(game.getSpeed()));

    }

    // метод для кастомного создания компонентов
    // компоненты создаются после до конструктора
    private void createUIComponents() {


        this.gameField = new TertisGameField(game, drawSquareStyleStrategy);
        this.nextShapeField = new NextShapeField(game, drawSquareStyleStrategy);

        JMenuBar menuBar = new JMenuBar();

        JMenu menu = menuBar.add(new JMenu("File"));

        JMenuItem menuItem = menu.add("Start");
        menuItem.addActionListener(e -> game.start());
        menu.addSeparator();
        menuItem = menu.add("Exit");
        menuItem.addActionListener(e -> System.exit(0));

        super.setJMenuBar(menuBar);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentField = new JPanel();
        contentField.setLayout(new GridBagLayout());
        contentField.setEnabled(true);
        gameFieldContainer = new JPanel();
        gameFieldContainer.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        gameFieldContainer.setMaximumSize(new Dimension(202, 402));
        gameFieldContainer.setMinimumSize(new Dimension(202, 402));
        gameFieldContainer.setPreferredSize(new Dimension(202, 402));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 10, 10, 5);
        contentField.add(gameFieldContainer, gbc);
        gameFieldContainer.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        gameField.setMaximumSize(new Dimension(200, 400));
        gameField.setMinimumSize(new Dimension(200, 400));
        gameField.setPreferredSize(new Dimension(200, 400));
        gameFieldContainer.add(gameField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentField.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setMaximumSize(new Dimension(82, 82));
        panel2.setMinimumSize(new Dimension(82, 82));
        panel2.setPreferredSize(new Dimension(82, 82));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 5, 10, 10);
        panel1.add(panel2, gbc);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        nextShapeField.setBackground(new Color(-855310));
        nextShapeField.setMaximumSize(new Dimension(80, 80));
        nextShapeField.setMinimumSize(new Dimension(80, 80));
        nextShapeField.setPreferredSize(new Dimension(80, 80));
        panel2.add(nextShapeField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 2.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel3, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(panel4, gbc);
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setText("remove line:");
        panel4.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removeLineValueLabel = new JLabel();
        removeLineValueLabel.setHorizontalAlignment(0);
        removeLineValueLabel.setText("0");
        panel4.add(removeLineValueLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(panel5, gbc);
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(0);
        label2.setText("score:");
        panel5.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scoreValueLabel = new JLabel();
        scoreValueLabel.setHorizontalAlignment(0);
        scoreValueLabel.setText("0");
        panel5.add(scoreValueLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(panel6, gbc);
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(0);
        label3.setText("speed:");
        label3.setVerticalAlignment(0);
        panel6.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        speedValueLabel = new JLabel();
        speedValueLabel.setHorizontalAlignment(0);
        speedValueLabel.setText("0");
        panel6.add(speedValueLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        statusLabelValue = new JLabel();
        statusLabelValue.setForeground(new Color(-16777216));
        statusLabelValue.setHorizontalAlignment(0);
        statusLabelValue.setHorizontalTextPosition(11);
        statusLabelValue.setText("pause");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 0.1;
        gbc.anchor = GridBagConstraints.SOUTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 20, 0);
        panel3.add(statusLabelValue, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentField;
    }

    /**
     * внутрений класс подпищика(наблюдателя)
     *
     * @author Ihar Misevich
     * @version 1.0
     */
    private class GameObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            if (arg != null) {
                if (arg.equals("removedLines"))
                    removeLineValueLabel.setText(String.valueOf(game.getRemovedLines()));
                if (arg.equals("score"))
                    scoreValueLabel.setText(String.valueOf(game.getScore()));
                if (arg.equals("speed"))
                    speedValueLabel.setText(String.valueOf(game.getSpeed()));
                if (arg.equals("pause") && game.isPause())
                    statusLabelValue.setEnabled(true);
                else
                    statusLabelValue.setEnabled(false);

                if (arg.equals("gameOver") && game.isGameOver()) {
                    statusLabelValue.setEnabled(true);
                    statusLabelValue.setForeground(Color.RED);
                    statusLabelValue.setText("Game Over!");
                }
            }
            repaint();
        }
    }
}
